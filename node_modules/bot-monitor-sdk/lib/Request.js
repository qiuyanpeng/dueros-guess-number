/**
 * Copyright (c) 2017 Baidu, Inc. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

/**
 * According to the bot protocol, get the required data from request
 **/
class Request {
    /**
     * @param {Object} data request body
     **/
    constructor (data) {
        if (!data) {
            throw new Error('data is undefined'); 
        }

        this._data = data;
        if (data && data.request) {
            this._requestType = data.request.type;
        }
    }

    /**
     * get request original data
     *
     * @return {Object}
     **/
    getData () {
        return this._data;  
    }

    /**
     * get request type
     *
     * @return {string}
     **/
    getType () {
        return this._requestType; 
    }

    /**
     * get the status of the audio playback
     *
     * @return {Mixed}
     */
    getAudioPlayerContext() {
        if (this._data.context) {
            return this._data.context.AudioPlayer;
        }
    }

    /**
     * get event request data
     *
     * @return {Mixed}
     */
    getEventData() {
        if (this._requestType == 'IntentRequest' 
                || this.isSessionEndedRequest()
                || this.isLaunchRequest()) {
            return;         
        }

        return this._data.request;
    }

    /**
     * get user id
     *
     * @return {string}
     **/
    getUserId () {
        if (this._data.context && this._data.context.System && this._data.context.System.user) {
            return this._data.context.System.user.userId;  
        }
        return '';
    }

    /**
     * get query content
     *
     * @return {string}
     **/
    getQuery () {
        if (this._data.request && this._data.request.query) {
            return this._data.request.query.original;
        }
        return '';
    }

    /**
     * get bot id
     *
     * @return {string}
     **/
    getBotId () {
        if (this._data.context && this._data.context.System && this._data.context.System.application) {
            return this._data.context.System.application.applicationId; 
        }
    }

    /**
     * get request id
     *
     * @return {string}
     **/
    getRequestId() {
        if (this._data.request) {
            return this._data.request.requestId;
        }
    }

    /**
     * get reason,When an error occurs, this value will be filled, If you
     * want to know what values ​​reson contains, or what each one means,
     * please refer to the bot protocol document.
     *
     * @return {string}
     **/
    getReason() {
        if (this._data.request) {
            return this._data.request.reason;
        }
    }

    /**
     * get intent name,indicates which session is currently in progress.
     *
     * @return {string}
     **/
    getIntentName() {
        if (this._data.request && this._data.request.intents) {
            return this._data.request.intents[0].name;
        }
    }

    /**
     * get session Id
     *
     * @return {string}
     **/
    getSessionId() {
        if (this._data.session) {
            return this._data.session.sessionId;
        }
    }

    /**
     * get device Id
     *
     * @return {string}
     **/
    getDeviceId() {
        if (this._data.context && this._data.context.System && this._data.context.System.device) {
            return this._data.context.System.device.deviceId;
        }
    }

    /**
     * get the location of the device,contains gps coordinates.
     *
     * @return {string}
     **/
    getLocation() {
        if (this._data.context && this._data.context.System && this._data.context.System.user &&
            this._data.context.System.user.userInfo && this._data.context.System.user.userInfo.location &&
            this._data.context.System.user.userInfo.location.geo) {
            return this._data.context.System.user.userInfo.location.geo;
        }
    }

    /**
     * when multiple sessions, determine whether the slot is filled.
     *
     * @return {boolean}
     **/
    isDialogStateCompleted() {
        if (this._data.request) {
            return this._data.request.dialogState == 'COMPLETED';
        }
        return false;
    }
}

module.exports = Request;
